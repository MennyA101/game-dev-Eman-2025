<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dino Runner</title>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            flex-direction: column;
            color: #333;
            user-select: none;
        }

        .game-container {
            position: relative;
            background-color: #fff;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 90%;
            width: 600px;
        }

        h1 {
            font-size: 2rem;
            margin: 0 0 10px 0;
        }

        #game-canvas {
            background-color: #e9e9e9;
            border: 2px solid #333;
            border-radius: 10px;
            width: 100%;
            aspect-ratio: 16 / 9;
        }

        #game-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        #restart-button {
            padding: 10px 20px;
            font-size: 1rem;
            color: #fff;
            background-color: #4CAF50;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-top: 10px;
        }

        #restart-button:hover {
            background-color: #45a049;
            transform: translateY(-2px);
        }

        #restart-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        #message-box {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 255, 255, 0.8);
            padding: 20px 40px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(5px);
            display: none;
            flex-direction: column;
            align-items: center;
            font-size: 1.5rem;
            font-weight: bold;
            z-index: 10;
        }

        #temp-message {
            position: absolute;
            top: 10%;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
            font-size: 1.2rem;
            font-weight: bold;
            z-index: 10;
        }
    </style>
</head>
<body>

    <div class="game-container">
        <h1>Dino Runner</h1>
        <div id="game-info">
            <span id="score-display">Score: 0</span>
            <span id="multiplier-display">x1</span>
            <span id="lives-display">Lives: 3</span>
        </div>
        <canvas id="game-canvas"></canvas>
        <button id="restart-button" style="display: none;">Restart</button>
        <div id="message-box">
            <span>Game Over!</span>
            <span id="final-score">Final Score: 0</span>
        </div>
        <div id="temp-message"></div>
    </div>

    <script>
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score-display');
        const livesDisplay = document.getElementById('lives-display');
        const multiplierDisplay = document.getElementById('multiplier-display');
        const restartButton = document.getElementById('restart-button');
        const messageBox = document.getElementById('message-box');
        const finalScoreSpan = document.getElementById('final-score');
        const tempMessage = document.getElementById('temp-message');

        // Game variables
        let dino, cacti, score, isJumping, isGameOver, gameSpeed, originalGameSpeed, lives, kidCount, scoreMultiplier;
        let isInvincible, isSlowMotion;
        const gravity = 0.7; 

        // Dino properties
        const dinoWidth = 40;
        const dinoHeight = 30;
        const dinoGround = canvas.height - dinoHeight - 20;

        // Obstacle properties
        const minCactusGap = 300;
        const maxCactusGap = 500;
        const cactusWidth = 20;
        const kidWidth = 25;
        const kidHeight = 25;
        
        let nextKidScore = 1500;

        // Game state
        function init() {
            dino = {
                x: 50,
                y: canvas.height - dinoHeight - 20,
                width: dinoWidth,
                height: dinoHeight,
                yVelocity: 0,
                color: '#666'
            };
            cacti = [];
            score = 0;
            lives = 3;
            kidCount = 0;
            scoreMultiplier = 1;
            isJumping = false;
            isGameOver = false;
            gameSpeed = 5;
            originalGameSpeed = 5;
            isInvincible = false;
            isSlowMotion = false;
            nextKidScore = 1500;

            updateUI();
            restartButton.style.display = 'none';
            messageBox.style.display = 'none';
            tempMessage.style.opacity = 0;

            requestAnimationFrame(gameLoop);
        }

        function updateUI() {
            scoreDisplay.textContent = `Score: ${score}`;
            livesDisplay.textContent = `Lives: ${lives}`;
            multiplierDisplay.textContent = `x${scoreMultiplier}`;
        }

        // Draw the character as a block
        function drawDino() {
            ctx.fillStyle = dino.color;
            ctx.fillRect(dino.x, dino.y, dino.width, dino.height);
        }

        // Draw a spike
        function drawCactus(cactus) {
            ctx.fillStyle = '#ff4500';
            ctx.beginPath();
            ctx.moveTo(cactus.x, cactus.y + cactus.height);
            ctx.lineTo(cactus.x + cactus.width, cactus.y + cactus.height);
            ctx.lineTo(cactus.x + cactus.width / 2, cactus.y);
            ctx.closePath();
            ctx.fill();
        }

        // Draw a kid block
        function drawKid(kid) {
            ctx.fillStyle = '#1e90ff';
            ctx.fillRect(kid.x, kid.y, kid.width, kid.height);
        }
        
        // Update character's position for jumping
        function updateDino() {
            if (isJumping) {
                dino.yVelocity += gravity;
                dino.y += dino.yVelocity;

                if (dino.y >= canvas.height - dinoHeight - 20) {
                    dino.y = canvas.height - dinoHeight - 20;
                    isJumping = false;
                }
            }
        }

        // Handle jump
        function jump() {
            if (!isJumping) {
                isJumping = true;
                dino.yVelocity = -12;
            }
        }

        // Update obstacles and spawn new ones
        function updateCacti() {
            cacti.forEach(obstacle => {
                obstacle.x -= gameSpeed;
            });

            cacti = cacti.filter(obstacle => obstacle.x + obstacle.width > 0);

            if (cacti.length === 0 || canvas.width - cacti[cacti.length - 1].x > Math.random() * (maxCactusGap - minCactusGap) + minCactusGap) {
                if (score >= nextKidScore) {
                    cacti.push({
                        x: canvas.width,
                        y: canvas.height - kidHeight - 20,
                        width: kidWidth,
                        height: kidHeight,
                        type: 'kid'
                    });
                    nextKidScore = score + 1500;
                } else {
                    const cactusHeight = Math.random() * 20 + 20;
                    cacti.push({
                        x: canvas.width,
                        y: canvas.height - cactusHeight - 20,
                        width: cactusWidth,
                        height: cactusHeight,
                        type: 'spike'
                    });
                }
            }
        }

        function showTempMessage(message) {
            tempMessage.textContent = message;
            tempMessage.style.opacity = 1;
            setTimeout(() => {
                tempMessage.style.opacity = 0;
            }, 1500);
        }
        
        function activatePowerUp() {
            const powerUps = ['invincibility', 'slowMotion', 'bonusMultiplier'];
            const randomPowerUp = powerUps[Math.floor(Math.random() * powerUps.length)];

            if (randomPowerUp === 'invincibility') {
                isInvincible = true;
                showTempMessage("Invincibility! 5 sec");
                dino.color = 'gold';
                setTimeout(() => {
                    isInvincible = false;
                    dino.color = '#666';
                    showTempMessage("Invincibility wore off.");
                }, 5000);
            } else if (randomPowerUp === 'slowMotion') {
                isSlowMotion = true;
                showTempMessage("Slow Motion! 6 sec");
                gameSpeed = originalGameSpeed * 0.5;
                setTimeout(() => {
                    isSlowMotion = false;
                    gameSpeed = originalGameSpeed;
                    showTempMessage("Speed restored.");
                }, 6000);
            } else if (randomPowerUp === 'bonusMultiplier') {
                const tempMultiplier = 5;
                scoreMultiplier *= tempMultiplier;
                showTempMessage("Score Multiplier x" + tempMultiplier + "! 5 sec");
                setTimeout(() => {
                    scoreMultiplier /= tempMultiplier;
                    showTempMessage("Multiplier wore off.");
                }, 5000);
            }
            updateUI();
        }

        // Check for collisions
        function checkCollision() {
            for (let i = 0; i < cacti.length; i++) {
                const obstacle = cacti[i];
                if (
                    dino.x < obstacle.x + obstacle.width &&
                    dino.x + dino.width > obstacle.x &&
                    dino.y < obstacle.y + obstacle.height &&
                    dino.y + dino.height > obstacle.y
                ) {
                    if (obstacle.type === 'spike') {
                        if (!isInvincible) {
                            lives--;
                            if (lives === 0) {
                                isGameOver = true;
                            } else {
                                showTempMessage(`Ouch! You lost a life.`);
                            }
                            cacti = [];
                            updateUI();
                            break; 
                        }
                    } else if (obstacle.type === 'kid') {
                        kidCount++;
                        scoreMultiplier = 2; // Every kid gives x2 multiplier
                        
                        if (kidCount % 3 === 0) {
                            activatePowerUp();
                        } else {
                            showTempMessage(`You found your kid!`);
                            dino.color = '#1e90ff';
                            setTimeout(() => {
                                dino.color = '#666';
                            }, 200);
                        }
                        
                        cacti.splice(i, 1);
                        updateUI();
                        break;
                    }
                }
            }
        }

        // Game loop
        function gameLoop() {
            if (isGameOver) {
                endGame();
                return;
            }

            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw ground line
            ctx.strokeStyle = '#666';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(0, canvas.height - 20);
            ctx.lineTo(canvas.width, canvas.height - 20);
            ctx.stroke();

            // Update and draw game elements
            updateDino();
            drawDino();
            updateCacti();
            cacti.forEach(obstacle => {
                if (obstacle.type === 'spike') {
                    drawCactus(obstacle);
                } else if (obstacle.type === 'kid') {
                    drawKid(obstacle);
                }
            });

            // Update score
            score += 1 * scoreMultiplier;
            updateUI();

            // Check for collision
            checkCollision();
            
            requestAnimationFrame(gameLoop);
        }

        // End the game
        function endGame() {
            messageBox.style.display = 'flex';
            finalScoreSpan.textContent = `Final Score: ${score}`;
            restartButton.style.display = 'inline';
        }

        // Restart the game
        restartButton.addEventListener('click', () => {
            init();
        });

        // Handle spacebar key press
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space' && !isGameOver) {
                jump();
            }
        });

        // Resize canvas to fit container
        function resizeCanvas() {
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            if (dino) {
                dino.y = canvas.height - dinoHeight - 20;
            }
            messageBox.style.display = 'none';
        }

        window.addEventListener('resize', resizeCanvas);
        init();
        resizeCanvas();

    </script>
</body>
</html>
